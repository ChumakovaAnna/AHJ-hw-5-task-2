!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=79)}([function(t,n,e){(function(n){var e=function(t){return t&&t.Math==Math&&t};t.exports=e("object"==typeof globalThis&&globalThis)||e("object"==typeof window&&window)||e("object"==typeof self&&self)||e("object"==typeof n&&n)||function(){return this}()||Function("return this")()}).call(this,e(48))},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(1);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,n,e){var r=e(3),o=e(28),i=e(6),a=e(8),c=Object.defineProperty;n.f=r?c:function(t,n,e){if(i(t),n=a(n,!0),i(e),o)try{return c(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported");return"value"in e&&(t[n]=e.value),t}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(2);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,n,e){var r=e(3),o=e(4),i=e(13);t.exports=r?function(t,n,e){return o.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(2);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n,e){var r=e(19),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,n,e){var r=e(0),o=e(34),i=e(5),a=e(35),c=e(43),u=e(70),f=o("wks"),s=r.Symbol,l=u?s:s&&s.withoutSetter||a;t.exports=function(t){return i(f,t)&&(c||"string"==typeof f[t])||(c&&i(s,t)?f[t]=s[t]:f[t]=l("Symbol."+t)),f[t]}},function(t,n,e){var r=e(0),o=e(22).f,i=e(7),a=e(31),c=e(14),u=e(73),f=e(30);t.exports=function(t,n){var e,s,l,p,d,v=t.target,h=t.global,m=t.stat;if(e=h?r:m?r[v]||c(v,{}):(r[v]||{}).prototype)for(s in n){if(p=n[s],l=t.noTargetGet?(d=o(e,s))&&d.value:e[s],!f(h?s:v+(m?".":"#")+s,t.forced)&&void 0!==l){if(typeof p==typeof l)continue;u(p,l)}(t.sham||l&&l.sham)&&i(p,"sham",!0),a(e,s,p,t)}}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n,e){var r=e(0),o=e(7);t.exports=function(t,n){try{o(r,t,n)}catch(e){r[t]=n}return n}},function(t,n,e){var r=e(0),o=e(14),i=r["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,n){t.exports={}},function(t,n,e){var r=e(38),o=e(18);t.exports=function(t){return r(o(t))}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,n,e){var r=e(60),o=e(0),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,n){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][n]||o[t]&&o[t][n]}},function(t,n,e){var r=e(3),o=e(61),i=e(13),a=e(17),c=e(8),u=e(5),f=e(28),s=Object.getOwnPropertyDescriptor;n.f=r?s:function(t,n){if(t=a(t),n=c(n,!0),f)try{return s(t,n)}catch(t){}if(u(t,n))return i(!o.f.call(t,n),t[n])}},function(t,n,e){var r=e(66),o=e(38),i=e(24),a=e(10),c=e(25),u=[].push,f=function(t){var n=1==t,e=2==t,f=3==t,s=4==t,l=6==t,p=7==t,d=5==t||l;return function(v,h,m,y){for(var g,b,x=i(v),S=o(x),E=r(h,m,3),w=a(S.length),O=0,T=y||c,I=n?T(v,w):e||p?T(v,0):void 0;w>O;O++)if((d||O in S)&&(b=E(g=S[O],O,x),t))if(n)I[O]=b;else if(b)switch(t){case 3:return!0;case 5:return g;case 6:return O;case 2:u.call(I,g)}else switch(t){case 4:return!1;case 7:u.call(I,g)}return l?-1:f||s?s:I}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6),filterOut:f(7)}},function(t,n,e){var r=e(18);t.exports=function(t){return Object(r(t))}},function(t,n,e){var r=e(2),o=e(42),i=e(11)("species");t.exports=function(t,n){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)?r(e)&&null===(e=e[i])&&(e=void 0):e=void 0),new(void 0===e?Array:e)(0===n?0:n)}},function(t,n,e){var r,o,i=e(0),a=e(69),c=i.process,u=c&&c.versions,f=u&&u.v8;f?o=(r=f.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},function(t,n,e){var r=e(3),o=e(4).f,i=Function.prototype,a=i.toString,c=/^\s*function ([^ (]*)/;r&&!("name"in i)&&o(i,"name",{configurable:!0,get:function(){try{return a.call(this).match(c)[1]}catch(t){return""}}})},function(t,n,e){var r=e(3),o=e(1),i=e(29);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,n,e){var r=e(0),o=e(2),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,n,e){var r=e(1),o=/#|\.prototype\./,i=function(t,n){var e=c[a(t)];return e==f||e!=u&&("function"==typeof n?r(n):!!n)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},c=i.data={},u=i.NATIVE="N",f=i.POLYFILL="P";t.exports=i},function(t,n,e){var r=e(0),o=e(7),i=e(5),a=e(14),c=e(32),u=e(50),f=u.get,s=u.enforce,l=String(String).split("String");(t.exports=function(t,n,e,c){var u,f=!!c&&!!c.unsafe,p=!!c&&!!c.enumerable,d=!!c&&!!c.noTargetGet;"function"==typeof e&&("string"!=typeof n||i(e,"name")||o(e,"name",n),(u=s(e)).source||(u.source=l.join("string"==typeof n?n:""))),t!==r?(f?!d&&t[n]&&(p=!0):delete t[n],p?t[n]=e:o(t,n,e)):p?t[n]=e:a(n,e)})(Function.prototype,"toString",(function(){return"function"==typeof this&&f(this).source||c(this)}))},function(t,n,e){var r=e(15),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},function(t,n,e){var r=e(34),o=e(35),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,n,e){var r=e(52),o=e(15);(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:"3.10.0",mode:r?"pure":"global",copyright:"Â© 2021 Denis Pushkarev (zloirock.ru)"})},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++e+r).toString(36)}},function(t,n,e){var r,o=e(6),i=e(56),a=e(20),c=e(16),u=e(59),f=e(29),s=e(33),l=s("IE_PROTO"),p=function(){},d=function(t){return"<script>"+t+"<\/script>"},v=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,n;v=r?function(t){t.write(d("")),t.close();var n=t.parentWindow.Object;return t=null,n}(r):((n=f("iframe")).style.display="none",u.appendChild(n),n.src=String("javascript:"),(t=n.contentWindow.document).open(),t.write(d("document.F=Object")),t.close(),t.F);for(var e=a.length;e--;)delete v.prototype[a[e]];return v()};c[l]=!0,t.exports=Object.create||function(t,n){var e;return null!==t?(p.prototype=o(t),e=new p,p.prototype=null,e[l]=t):e=v(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(5),o=e(17),i=e(58).indexOf,a=e(16);t.exports=function(t,n){var e,c=o(t),u=0,f=[];for(e in c)!r(a,e)&&r(c,e)&&f.push(e);for(;n.length>u;)r(c,e=n[u++])&&(~i(f,e)||f.push(e));return f}},function(t,n,e){var r=e(1),o=e(9),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},function(t,n,e){var r=e(19),o=Math.max,i=Math.min;t.exports=function(t,n){var e=r(t);return e<0?o(e+n,0):i(e,n)}},function(t,n,e){var r=e(37),o=e(20).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,n,e){var r=e(0),o=e(64),i=e(65),a=e(7);for(var c in o){var u=r[c],f=u&&u.prototype;if(f&&f.forEach!==i)try{a(f,"forEach",i)}catch(t){f.forEach=i}}},function(t,n,e){var r=e(9);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(68),o=e(26),i=e(1);t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(r?38===o:o>37&&o<41)}))},function(t,n,e){"use strict";var r=e(8),o=e(4),i=e(13);t.exports=function(t,n,e){var a=r(n);a in t?o.f(t,a,i(0,e)):t[a]=e}},function(t,n,e){var r=e(1),o=e(11),i=e(26),a=o("species");t.exports=function(t){return i>=51||!r((function(){var n=[];return(n.constructor={})[a]=function(){return{foo:1}},1!==n[t](Boolean).foo}))}},function(t,n,e){var r=e(11),o=e(36),i=e(4),a=r("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),t.exports=function(t){c[a][t]=!0}},function(t,n,e){},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){"use strict";var r=e(3),o=e(0),i=e(30),a=e(31),c=e(5),u=e(9),f=e(53),s=e(8),l=e(1),p=e(36),d=e(40).f,v=e(22).f,h=e(4).f,m=e(62).trim,y=o.Number,g=y.prototype,b="Number"==u(p(g)),x=function(t){var n,e,r,o,i,a,c,u,f=s(t,!1);if("string"==typeof f&&f.length>2)if(43===(n=(f=m(f)).charCodeAt(0))||45===n){if(88===(e=f.charCodeAt(2))||120===e)return NaN}else if(48===n){switch(f.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+f}for(a=(i=f.slice(2)).length,c=0;c<a;c++)if((u=i.charCodeAt(c))<48||u>o)return NaN;return parseInt(i,r)}return+f};if(i("Number",!y(" 0o1")||!y("0b1")||y("+0x1"))){for(var S,E=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof E&&(b?l((function(){g.valueOf.call(e)})):"Number"!=u(e))?f(new y(x(n)),e,E):x(n)},w=r?d(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range".split(","),O=0;w.length>O;O++)c(y,S=w[O])&&!c(E,S)&&h(E,S,v(y,S));E.prototype=g,g.constructor=E,a(o,"Number",E)}},function(t,n,e){var r,o,i,a=e(51),c=e(0),u=e(2),f=e(7),s=e(5),l=e(15),p=e(33),d=e(16),v=c.WeakMap;if(a){var h=l.state||(l.state=new v),m=h.get,y=h.has,g=h.set;r=function(t,n){return n.facade=t,g.call(h,t,n),n},o=function(t){return m.call(h,t)||{}},i=function(t){return y.call(h,t)}}else{var b=p("state");d[b]=!0,r=function(t,n){return n.facade=t,f(t,b,n),n},o=function(t){return s(t,b)?t[b]:{}},i=function(t){return s(t,b)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(n){var e;if(!u(n)||(e=o(n)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return e}}}},function(t,n,e){var r=e(0),o=e(32),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},function(t,n){t.exports=!1},function(t,n,e){var r=e(2),o=e(54);t.exports=function(t,n,e){var i,a;return o&&"function"==typeof(i=n.constructor)&&i!==e&&r(a=i.prototype)&&a!==e.prototype&&o(t,a),t}},function(t,n,e){var r=e(6),o=e(55);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,n=!1,e={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(e,[]),n=e instanceof Array}catch(t){}return function(e,i){return r(e),o(i),n?t.call(e,i):e.__proto__=i,e}}():void 0)},function(t,n,e){var r=e(2);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,n,e){var r=e(3),o=e(4),i=e(6),a=e(57);t.exports=r?Object.defineProperties:function(t,n){i(t);for(var e,r=a(n),c=r.length,u=0;c>u;)o.f(t,e=r[u++],n[e]);return t}},function(t,n,e){var r=e(37),o=e(20);t.exports=Object.keys||function(t){return r(t,o)}},function(t,n,e){var r=e(17),o=e(10),i=e(39),a=function(t){return function(n,e,a){var c,u=r(n),f=o(u.length),s=i(a,f);if(t&&e!=e){for(;f>s;)if((c=u[s++])!=c)return!0}else for(;f>s;s++)if((t||s in u)&&u[s]===e)return t||s||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,n,e){var r=e(21);t.exports=r("document","documentElement")},function(t,n,e){var r=e(0);t.exports=r},function(t,n,e){"use strict";var r={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!r.call({1:2},1);n.f=i?function(t){var n=o(this,t);return!!n&&n.enumerable}:r},function(t,n,e){var r=e(18),o="["+e(63)+"]",i=RegExp("^"+o+o+"*"),a=RegExp(o+o+"*$"),c=function(t){return function(n){var e=String(r(n));return 1&t&&(e=e.replace(i,"")),2&t&&(e=e.replace(a,"")),e}};t.exports={start:c(1),end:c(2),trim:c(3)}},function(t,n){t.exports="\t\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\ufeff"},function(t,n){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,n,e){"use strict";var r=e(23).forEach,o=e(71)("forEach");t.exports=o?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,n,e){var r=e(67);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 0:return function(){return t.call(n)};case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,n,e){var r=e(9),o=e(0);t.exports="process"==r(o.process)},function(t,n,e){var r=e(21);t.exports=r("navigator","userAgent")||""},function(t,n,e){var r=e(43);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,n,e){"use strict";var r=e(1);t.exports=function(t,n){var e=[][t];return!!e&&r((function(){e.call(null,n||function(){throw 1},1)}))}},function(t,n,e){"use strict";var r=e(12),o=e(1),i=e(42),a=e(2),c=e(24),u=e(10),f=e(44),s=e(25),l=e(45),p=e(11),d=e(26),v=p("isConcatSpreadable"),h=d>=51||!o((function(){var t=[];return t[v]=!1,t.concat()[0]!==t})),m=l("concat"),y=function(t){if(!a(t))return!1;var n=t[v];return void 0!==n?!!n:i(t)};r({target:"Array",proto:!0,forced:!h||!m},{concat:function(t){var n,e,r,o,i,a=c(this),l=s(a,0),p=0;for(n=-1,r=arguments.length;n<r;n++)if(y(i=-1===n?a:arguments[n])){if(p+(o=u(i.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(e=0;e<o;e++,p++)e in i&&f(l,p,i[e])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");f(l,p++,i)}return l.length=p,l}})},function(t,n,e){var r=e(5),o=e(74),i=e(22),a=e(4);t.exports=function(t,n){for(var e=o(n),c=a.f,u=i.f,f=0;f<e.length;f++){var s=e[f];r(t,s)||c(t,s,u(n,s))}}},function(t,n,e){var r=e(21),o=e(40),i=e(75),a=e(6);t.exports=r("Reflect","ownKeys")||function(t){var n=o.f(a(t)),e=i.f;return e?n.concat(e(t)):n}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){"use strict";var r=e(12),o=e(23).findIndex,i=e(46),a=!0;"findIndex"in[]&&Array(1).findIndex((function(){a=!1})),r({target:"Array",proto:!0,forced:a},{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("findIndex")},function(t,n,e){"use strict";var r=e(12),o=e(39),i=e(19),a=e(10),c=e(24),u=e(25),f=e(44),s=e(45)("splice"),l=Math.max,p=Math.min;r({target:"Array",proto:!0,forced:!s},{splice:function(t,n){var e,r,s,d,v,h,m=c(this),y=a(m.length),g=o(t,y),b=arguments.length;if(0===b?e=r=0:1===b?(e=0,r=y-g):(e=b-2,r=p(l(i(n),0),y-g)),y+e-r>9007199254740991)throw TypeError("Maximum allowed length exceeded");for(s=u(m,r),d=0;d<r;d++)(v=g+d)in m&&f(s,d,m[v]);if(s.length=r,e<r){for(d=g;d<y-r;d++)h=d+e,(v=d+r)in m?m[h]=m[v]:delete m[h];for(d=y;d>y-r+e;d--)delete m[d-1]}else if(e>r)for(d=y-r;d>g;d--)h=d+e-1,(v=d+r-1)in m?m[h]=m[v]:delete m[h];for(d=0;d<e;d++)m[d+g]=arguments[d+2];return m.length=y-r+e,s}})},function(t,n,e){"use strict";var r=e(12),o=e(23).find,i=e(46),a=!0;"find"in[]&&Array(1).find((function(){a=!1})),r({target:"Array",proto:!0,forced:a},{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("find")},function(t,n,e){"use strict";e.r(n);e(47);e(27),e(49),e(41),e(72);function r(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.container=null,this.popup=null,this.data=n}var n,e,o;return n=t,o=[{key:"renderItem",value:function(t,n,e){var r=document.createElement("div");return r.classList.add("grid"),r.dataset.id=t,r.innerHTML='\n    <div class="col-7">\n      '.concat(n,'\n    </div>\n    <div class="col align">\n      ').concat(e,'\n    </div>\n    <div class="col align">\n      <button class="edit">\n        <img src="src/img/edit.png" data-btn="edit" alt="add">\n      </button>\n      <button class="delete">\n        <img src="src/img/delete.png" data-btn="delete" alt="add">\n      </button>\n    </div>\n    '),r}},{key:"renderError",value:function(t,n){var e=document.createElement("div");e.classList.add("error"),e.innerText=n,t.parentElement.insertAdjacentElement("beforeend",e)}}],(e=[{key:"bindToDOM",value:function(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t}},{key:"renderPopup",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";this.popup=document.createElement("div"),this.popup.classList.add("popup"),this.popup.innerHTML='\n    <form class="form">\n      <div class="containerInput">\n        <input class="input" data-name="name" name="name"  placeholder="Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ">\n      </div>  \n      <div class="containerInput">\n        <input class="input" data-name="price" name="price"  placeholder="ÑÑÐ¾Ð¸Ð¼Ð¾ÑÑÑ">\n      </div>  \n      <div class="buttons">\n        <button type="submit" class="btn_form submit">\n          <img src="src/img/submit.png" data-btn="submit" alt="save">\n        </button>\n        <button class="btn_form cancel">\n          <img src="src/img/cancel.png" data-btn="cancel" alt="cancel">\n        </button>\n      </div>\n    </form>\n    ',this.container.insertAdjacentElement("afterend",this.popup);var r="",o="",i=document.querySelector("[data-name=name]"),a=document.querySelector("[data-name=price]");if(e){var c=this.data.findItem(e);r=c.name,o=c.price,i.value=r,a.value=o}this.popup.addEventListener("change",(function(t){var n=t.target;"name"===n.dataset.name&&(r=n.value),"price"===n.dataset.name&&(o=n.value)})),this.popup.addEventListener("click",(function(c){c.preventDefault();var u=c.target;"submit"===u.dataset.btn&&(i.value?a.value&&Number(a.value)&&a.value>0?(r&&o&&!e&&n.data.addItem(r,o),r&&o&&e&&n.data.changeItem(e,r,o),n.deletePopup(),n.renderData()):t.renderError(a,"Ð¦ÐµÐ½Ð° Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ ÑÐ¾Ð»ÑÐºÐ¾ ÑÐ¸ÑÐ»Ð¾Ð¼ Ð±Ð¾Ð»ÑÑÐµ 0"):t.renderError(i,"ÐÐ°Ð¿Ð¾Ð»Ð½Ð¸ÑÐµ ÑÑÐ¾ Ð¿Ð¾Ð»Ðµ")),"cancel"===u.dataset.btn&&n.deletePopup()})),this.popup.addEventListener("input",(function(){var t=n.popup.querySelectorAll(".error");t&&t.forEach((function(t){t.remove()}))}))}},{key:"deletePopup",value:function(){this.popup.remove()}},{key:"renderData",value:function(){var n=this;this.clearContainer(),this.data.data.forEach((function(e){var r=t.renderItem(e.id,e.name,e.price);n.container.insertAdjacentElement("beforeend",r)}))}},{key:"clearContainer",value:function(){this.container.querySelectorAll(".grid").forEach((function(t){t.remove()}))}}])&&r(n.prototype,e),o&&r(n,o),t}();e(76),e(77),e(78);let i=(t=21)=>{let n="",e=crypto.getRandomValues(new Uint8Array(t));for(;t--;){let r=63&e[t];n+=r<36?r.toString(36):r<62?(r-26).toString(36).toUpperCase():r<63?"_":"-"}return n};function a(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var c=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.data=[]}var n,e,r;return n=t,(e=[{key:"addItem",value:function(t,n){var e={id:i(),name:t,price:n};this.data.push(e)}},{key:"deleteItem",value:function(t){var n=this.data.findIndex((function(n){return n.id===t}));-1!==n?this.data.splice(n,1):console.log("The item was not found")}},{key:"changeItem",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=this.data.find((function(n){return n.id===t}));return r&&(n&&(r.name=n),e&&(r.price=e)),console.log("The item was not found"),!1}},{key:"findItem",value:function(t){var n=this.data.find((function(n){return n.id===t}));return n||!1}},{key:"clearData",value:function(){var t=this;this.data.forEach((function(n){console.log(n),t.deleteItem(n.id)}))}}])&&a(n.prototype,e),r&&a(n,r),t}();console.log("Started");var u=new c,f=document.querySelector(".table"),s=new o(u);s.bindToDOM(f),s.renderData(),document.querySelector("[data-container=document]").addEventListener("click",(function(t){!function(t,n,e){var r=t.target;if(r.dataset){if("delete"===r.dataset.btn){e.clearContainer();var o=r.closest("[data-id]").dataset.id;n.deleteItem(o),e.renderData()}if("add"===r.dataset.btn&&e.renderPopup(),"edit"===r.dataset.btn){var i=r.closest("[data-id]").dataset.id;e.renderPopup(i)}}}(t,u,s)}));e.p,e.p,e.p,e.p,e.p}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,